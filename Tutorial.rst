写给非程序员的 Vim 新手教程
===========================

| 想为非程序员写一篇 Vim 新手入门教程有很久了。
| 很多人说 Vim
入门学习曲线陡峭，又只适合程序员、系统管理员使用，纷纷敬而远之。
| 网络上各种入门教程要么千篇一律，要么极为简单。
| 对新人确实不够友好，一定程度上也阻止了更多的人学习、喜爱上 Vim。

| 而以我自学的经历来说，Vim 的上手远没想象的那么恐怖。
| 非程序员写写中文文章、脚本、配置文件等也能从 Vim 中获益良多。
| 也许我自学的方法和心得对新人有用，希望这篇新手教程能够帮到愿意尝试 Vim
的朋友。

| 既然是面向非程序员，教程基于 Windows 下的 gVim（GUI
图形界面版本），这样可以覆盖尽可能多的新手，降低入门难度。
| 我自己使用 gVim 7.4版本，示例截图统一采用 Github 配色方案。

为什么选择 Vim
--------------

| 我曾经在 Windows
平台下寻找了很久，希望找到一个功能强大、稳定、高效、占用资源少、自定义能力强，最好是免费、开源、跨平台（只是日常使用也会接触到各种操作系统）的编辑器。
| 其他要求容易评价，功能强大、高效和自定义需求方面，很难说哪个编辑器是适合所有人的。
| 就我自己而言，反正在主力编辑器换用 Vim
之前，经常会为了增加或完善某个功能尝试不同的编辑器。
| 而在那之后，基本上只需要找相应的操作快捷键、命令、配置或插件，因为99%的情况下，Vim
已经做到了，只等着你去发掘。

因此，只要度过最初的入门阶段，知道到哪里去发现增强功能的手段，今后的文本编辑和处理就可以一直在
Vim 的平台上完成，越来越熟练，从而节省了寻找和适应新编辑器的时间。

| 而且，Vim
的设计哲学与其他文本编辑器截然不同，在这种设计哲学下，文本操作效率高，入门后复杂的快捷键和命令其实也并不难记忆，习惯了之后有举重若轻、事半功倍的快感。
| 即使许多编辑器有模仿 Vim
操作指令的模式，但只能模仿一部分，永远也无法完全复制原生 Vim 的体验。

Vim 的入门之道
--------------

| 传说中 Vim
的学习曲线是陡峭的悬崖，但我更倾向于认为这是因为入门方法不正确。
| 我希望新人们先接受 Vim 的设计哲学，了解到 Vim
的操作为什么如此与众不同，明白如此设计的优势何在，看上去纷繁无比的命令、指令和配置才不会显得那么可怕，反而可以在不断的学习中融会贯通。

| 从心态上说，我希望初学者从基本的编辑功能开始，逐步替换基本的编辑器，不要试图一下子掌握太多技能。
| 然后也不用纠结一上来就完全抛弃鼠标和方向键，练习的过程中觉得怎么方便怎么来就行，不要给自己太多压力。

其他教程
~~~~~~~~

| 为避免本教程水平有限误人子弟，欢迎不得其法的入门者尝试以下的其他教程，不要因为入门艰难而放弃探索这个有意思的编辑器。
| 也可相互参考，同步学习，不必拘泥于本教程的章节顺序设置。

-  | 自带教程 Vim Tutor
   | 就是打开 Vim 之后输入 ``:help tutor``
   | 如果你安装的 Vim
   没有自带中文教程，可以下载\ `中文教程 <http://sourceforge.net/projects/vimcdoc/>`__\ 并安装，再输入以上的命令。
   | Vim 自带的教程其实已经非常完善，按顺序阅读下来就能入门。
   | 但不足之处是有时候比较啰嗦，有时候又一笔带过，而且并未详述 Vim
   的设计理念。

-  | `大家來學VIM（一個歷久彌新的編輯器） <http://www.study-area.org/tips/vim/>`__
   | 我开始入门时就有的经典教程。

-  | `Learn Vim
   Progressively <http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/>`__
   | 中文翻译：\ `简明 Vim
   练级攻略 <http://coolshell.cn/articles/5426.html>`__

-  `普通人的编辑利器——Vim <http://blog.sina.com.cn/s/blog_46dac66f010005kw.html>`__

-  `善用佳软整理的教程与学习资料汇总 <http://xbeta.info/vim-tutorials.htm>`__

-  `Vim Introduction and
   Tutorial <https://blog.interlinked.org/tutorials/vim_tutorial.html>`__

-  `Vim 学习笔记 <http://yyq123.blogspot.com/search/label/Vim>`__

其他编辑器推荐
~~~~~~~~~~~~~~

| Vim
肯定不可能适合所有人，只要你找到最适合自己的工具，完成好自己的工作，不用纠结这个工具在别人看来如何。
| 如果最终还是没法适应 Vim，我推荐在 Windows 下其他几款文本编辑器：

-  | `Notepad ++ <https://notepad-plus-plus.org/>`__
   | 基于 `Scintilla <http://www.scintilla.org/>`__
   的开源、免费文本编辑器，遵循 GPL 协议。

-  | `EverEdit <http://cn.everedit.net/>`__
   | 国人开发的共享软件，支持多种新颖的功能，如文档地图、颜文字等，还有专为中文用户开发的功能，如纵向书写模式、中文括号自动匹配等。
   | 有30天试用期，详情可参考善用佳软的\ `介绍文章 <http://xbeta.info/everedit.htm>`__\ 。

-  | `EmEditor <https://www.emeditor.com/>`__
   | 日本公司开发的共享软件，速度快，大文件支持好，有多种贴心功能。
   | 有可免费使用的老版本。

-  | `Sublime Text 2 <http://www.sublimetext.com/2>`__ 和
   `3 <http://www.sublimetext.com/3>`__
   | 很受程序员欢迎的文本编辑器，界面美观，功能强大。

-  | `UltraEdit <http://www.ultraedit.cn/>`__
   | 很经典的编辑器，至今还有大量程序员在使用。

-  | `EditPlus <https://www.editplus.com/>`__
   | 另一款非常经典的编辑器，韩国人出品，同样也有大量用户。

Vi 的设计哲学和操作逻辑
-----------------------

学习 Vim 最关键的不是死记硬背，而是先知其所以然。

| Pascal Precht 在《\ `为何使用
Vim <https://pascalprecht.github.io/2014/03/18/why-i-use-vim/>`__\ 》中说，用好
Vim 要理解：
| - 模式概念
| - 文本对象

| Vim 特有的操作逻辑都基于这两个概念。
| 然后你会发现，\ `Vim
的学习曲线 <https://pascalprecht.github.io/2014/03/18/why-i-use-vim/#figure-1>`__\ 更像翻墙而过，而不是一直爬陡坡。

以下的概念介绍很重要，但不必记住具体的操作，后面的基础操作讲解中都会提到，到那个时候再动手练习也不迟。

模式
~~~~

Vim 的模式有许多种，作为入门者最常接触的也有四种（近似的模式做了合并）：

1. | 普通模式 normal mode
   | 用于输入编辑文本的指令，和移动光标。
   | 例如在普通模式下输入 ``x``\ ，会立即删除光标所在的字符（你可以将
   ``x`` 理解为画一把叉表示删除，方便记忆）。
   | 输入 ``h``/``j``/``k``/``l``
   分别是向左/下/上/右横向一个字符或纵向移动一行。

2. | 插入模式 insert mode
   | 用于输入文本字符。与一般的文本编辑器并无二致。

3. | 命令模式 command/ex mode
   | 用于输入命令，执行函数，变更配置。
   | 例如在普通模式下，输入 ``:`` 进入命令模式，然后输入 ``sort``
   回车，给所有行排序。

4. | 可视/选择模式 visual/select mode
   | 用于选择文本对象，以便对其执行下一步操作。
   | 例如在普通模式下，输入 ``V``
   会选中光标所在的那一整行，接下来输入的操作命令都是针对这一整行文字的。

新手学习 Vim 遇到的第一堵墙一般是，一开始进入 Vim
并不能直接输入文字，因为默认是处于普通模式中。

| 那为什么 Vim 要设计多模式呢？
| 我的理解是，文本编辑器在\ **输入文字**\ 之外，还有\ **调整文字**\ 的任务，因此必然需要输入一套命令信息，并能区分于输入的文字信息。

输入的命令信息可以分为三类：

1. | 非键盘操作
   | 比如鼠标或手指的选择、点击、拖拽等等，或借助菜单触发指令。
   | 一般的文本编辑器都支持这种方式，直观易上手是最大的优点。
   | 弊端是，随着操作越来越多，此类命令就越难以记忆，或者界面上的菜单、按钮等等越来越复杂。
   | 在 Vi/Vim
   诞生的年代，还没有普及这么高级的输入方式，虽然现在也支持，但许多人入门后会隐藏菜单、禁用鼠标。

2. | 增加指令键，引入按键组合
   | ``Ctrl``\ 、\ ``Shift``\ 、\ ``Alt``/``Meta``/``Options``\ 、\ ``Windows``/``Command``\ ，\ ``Fn``\ 、\ ``F1``-``F12``\ 等功能键，\ ``Insert``\ 、\ ``Delete``
   等编辑键，这些按键和字母、数字、符号键的组合，以及这些组合之间的组合，都能与输入的文字信息区分开来，让计算机可以识别。
   | 一般的文本编辑器也采用这种方法，与第一种方案结合，可以满足大部分人的需求。
   | Vim 中的许多指令也会用到这些按键组合。
   | 弊端是，有的辅助按键本身并无含义，又住在键盘的偏远角落里，有的复杂命令可能需要多个按键同时按下，还可能反复多次组合，长期使用下来，手指很遭罪，记忆难度也迅速上升。

3. | 增加模式
   | 增加模式的结果是，在插入模式下用于输入文字的按键，在普通模式下按下就变成修改文本或移动跳转的命令，在选择模式下就变成改变选择范围的命令。
   | 相当于\ **在输入按键基本不变的前提下，输入的命令信息因为模式的增加而翻倍**\ 。
   | 这样，数字、字母、符号键也就能够充分利用起来，这些按键的意义也比辅助按键易于记忆。
   | 正是这种不同一般的思路使 Vi/Vim
   选择多模式方案，与一般的文本编辑器分道扬镳。

文本对象
~~~~~~~~

| Vim
可以识别文本中的英文单词、句子、段落、块，并有对应的文本对象选择命令。
| 与编辑、移动、选择的命令结合起来，可以快速的操作整个文本对象。

以如下这段文字为例：

.. figure:: images/text_objects_example.png
   :alt: 文本对象示例1

   文本对象示例1
| 普通模式下，光标在浅蓝色范围内任意一处时，按下 ``viw``
就会选中整个浅蓝色部分的单词。
| 而这个命令组合翻译过来就是：
| v: visual，进入可视模式，开始选择文本
| i:
inside/inner，内部，表示如果单词后面有空格等其他字符，选择的范围不包括空格
| w: word，单词

| **学习和记忆 Vim
的指令时，建议尽量找到其对应的英文单词**\ ，只要能方便记忆就行，不必纠结于单词是否正确。
| 这样很多指令组合就像用英语说话，可以大大降低记忆难度。

| 如果光标在绿色范围内时，按下 ``yis`` 就会复制整个绿色部分的句子。
| 这组命令的含义是：
| y: yank，复制
| i: inside/inner，内部
| s: sentence，句子
| 非常接近于自然语言：yank inside sentence.

| 如果光标在黄色范围内时，按下 ``dap``
就会清除整个黄色部分段落的内容，光标停留在下一段的起始处。
| 这组命令的含义是：
| d: delete，删除
| a: around，围绕在外部
| p: paragraph，段落
| delete around paragraph.

注意，Vim
并不能按照中文文本对象规则识别中文字符和标点，比如在处理如下示例文字时：

.. figure:: images/text_objects_example_2.png
   :alt: 

| 粉红色部分会识别为一个单词，理想情况下应该按中文含义分词再选择，显然目前还没有编辑器能够做到这点。
| 淡紫色部分会识别为整个句子，这就错得更加离谱了，原因是 Vim
对逗号、分号、句号一视同仁。
| 淡蓝色部分还是会识别为段落，因为段落是根据换行判断的，中英文没有区别。

做好一件事
~~~~~~~~~~

Vim
只专注做一件事情——纯文本编辑器，不考虑富文本编辑，不插入图片，更没有成为“操作系统”的野心。

安装
----

下载
~~~~

到 `Vim
官方网站下载页 <http://www.vim.org/download.php>`__\ 下载，Windows
平台用户选择安装包文件即可。

.. figure:: images/download.png
   :alt: 

安装的过程就不做演示了，但请务必记住 Vim 的安装目录，其下有名为 \_vimrc
的文件，是 Vim 的关键配置文件，后面会详细说明。

如果今后报错说缺少 iconv.dll 文件，可以从 `gettext for
Win32 <http://sourceforge.net/projects/gettext/>`__
下载的文件中提取，放在 gvim.exe 所在的目录中，如 ``vim74`` 目录。

| 有其他人自己编译了支持 Perl、Ruby、Lua 等的 Vim
版本，这样可以用上更加强大的插件。
| 你可以下载 Vim
源码自己编译，也可以下载其他人编译的版本，比如\ `这里 <https://tuxproject.de/projects/vim/>`__\ 和\ `这里 <http://www.kaoriya.net/software/vim/>`__\ 。

启动参数
~~~~~~~~

| Windows 下使用 Vim 打开文本文件会自动新建窗口，启动一个新的 gVim
实例。
| 你也可以更改启动命令的参数，使用
``gvim.exe --remote-silent``\ ，在同一个窗口的新缓冲区中打开，或使用
``gvim.exe --remote-tab-silent`` 在新的标签页中打开。

我自己是使用 Totoal Commander + candy，在任何文件上按下 ``F4``\ ，会跳出
candy 的菜单：

.. figure:: images/candy.png
   :alt: 

然后可以自由选择是在新的 gVim 进程实例还是新的缓冲区打开文件。

关于缓冲区、标签页的说明，后面会提到。如果不熟悉，可以暂时不更改启动参数，保持原样。

救命！
~~~~~~

| 不要恐慌！
| 如果你在使用 Vim
时晕头转向，手足无措，一般有两个救命锦囊（并不总是有效）：
| 1. 按键盘左上角的 ``Esc`` 键，返回刚进入 Vim
时的普通模式，然后再重新出发。
| ``Esc`` 表示 Escape，记忆为“逃脱”就行。
| 2. 在普通模式下输入 ``:help 关键字``\ ，根据关键字查找 Vim
帮助文档中相应的主题。

.. figure:: images/help.png
   :alt: 

| 学习到相关的知识后再尝试操作。
| 其后我会在知识点中加上对应的帮助主题关键字，以\ *斜体*\ 表示。如有更多疑问，可在
Vim 中自己查找帮助文档。
| 更高级的用法是 ``:helpgrep 关键字``\ ，像 grep
命令一样查找帮助文档中包含关键字的所有行，但只会在新窗口中展示第一个匹配的结果，更多的用法可以自己输入
``:help helpgrep`` 探索。

作为基本编辑器的 Vim
--------------------

| 掌握 Vim
的强大功能之前，建议先将其作为基本的编辑器使用一段时间，在日常使用过程中一步步发掘不同于一般编辑器的功能点，渐进式地学习。
| 所以，我会先讲解如何将 Vim
当作最简单的编辑器使用，然后再逐步引入更高级、更复杂的功能。

初次进入的界面
~~~~~~~~~~~~~~

在默认配置下，首次进入 gVim 会看到如下界面：

.. figure:: images/default_startup.png
   :alt: 

菜单栏和按钮工具栏与一般的文本编辑器大同小异，菜单中部分命令有相应的命令提示。

.. figure:: images/menu.png
   :alt: 

如果不熟悉常用功能的命令，可以暂时保留菜单栏和工具栏，等到熟悉了再隐藏。

目前我自己配置的界面是这个样子：

.. figure:: images/custom_interface.png
   :alt: 

| 原来菜单栏和工具栏的位置被缓冲区标签页代替。
| 底部则是状态栏，显示当前的模式、文件名、文件修改时间、文件格式（dos、unix
或 mac 格式）、字符编码、文件类型和光标位置信息。

.. figure:: images/custom_interface_2.png
   :alt: 

如果按 ``:`` 进入命令模式，则在状态栏下方输入命令：

.. figure:: images/command_input.png
   :alt: 

进入插入模式开始编辑
~~~~~~~~~~~~~~~~~~~~

| 因为默认模式是普通模式，所以要输入文字需要进入插入模式。
| 进入插入模式最常用的指令是 ``i``\ ，是 *insert*
的缩写，含义是在当前字符之前插入，也就是移动光标至当前字符之前再进入插入模式。
| 例如，现在要在光标所在位置之前开始编辑文字：

.. figure:: images/insert.png
   :alt: 插入之前

   插入之前
左下角的模式显示为 NORMAL，表示处于普通模式。

按下 ``i`` 键后，光标变为表示可以输入的竖线：

.. figure:: images/insert_2.png
   :alt: 进入插入模式

   进入插入模式
| 如果无法正常进入插入模式，界面上出现未上屏的 i
字符，多半是因为开启的中文输入法抢先拦截了。
| 可以切换到英文输入状态，然后在普通模式下输入指令。
| 如果觉得总是英文输入状态很麻烦，可以试试谷歌输入法、手心输入法等。

| 如果要在当前字符之后插入呢？
| 按下 ``a`` 就行，含义是追加，对应的英文为 append。

| 也许你会觉得，在字符前还是后进入插入模式还要弄两个命令，太小题大做。
| 那插入新行的指令 ``o`` 和 ``O`` 就显得实用多了。
| 在普通模式中输入 ``o``\ ，表示在当前行下插入新行，并停留在插入模式。
| 相比之下，一般编辑器需要按 ``End`` 移动光标到行尾，再按 ``Enter``
换行。
| 大写字母 ``O``
指令则正好相反，在当前行上面插入新行，并停留在插入模式。
| 相比之下，一般编辑器要按 ``Home`` 移动光标到行首，按 ``Enter``
换行，再按 ``Up`` 移动到新行。

| 更加厉害的是，上述指令可以与数字配合。
| 遵循 [count]command 的格式，如 ``10O``\ ，进入插入模式输入文字后再按
``Esc`` 退回普通模式，刚才输入的文字就会变成10行。

打开文件
~~~~~~~~

:browse open

多缓冲区概念介绍，后续有详细章节

保存
~~~~

复制、删除/剪切和粘贴
~~~~~~~~~~~~~~~~~~~~~

行
~~

查找和替换
~~~~~~~~~~

正则表达式简介

最近打开的文件
~~~~~~~~~~~~~~

| :bro[wse] ol[dfiles]
| q - number

撤销
~~~~

美化
----

自动换行
~~~~~~~~

屏幕渲染
~~~~~~~~

MacType

配置文件简介
~~~~~~~~~~~~

编码
~~~~

字体
~~~~

配色
~~~~

语法高亮
~~~~~~~~

光标移动
--------

常用指令
--------

常用命令
--------

较现代的文本编辑功能
--------------------

多标签/多缓冲区
~~~~~~~~~~~~~~~

Buffer（缓冲区）、Window（窗口）和Tab-page（标签页）。

::

    Buffer: 用Vim打开文件后，Vim打开的文件都会被加载到内存中，在内存中我们使用 Buffer来描述正在编辑的文件，一个 Buffer 对应一个被编辑的文件副本。当我们在完成了一个 Buffer 的编辑后就可以保存该文件。Buffer 不仅包含了文件的内容， 也记录了该文件的编辑状态等配置信息，比如激活、隐藏、上次编辑行数等。用 Vim 可以打开多个文件同时编辑，也可以把不需要的文件关掉，但这时文件副本依然保存在缓冲区中，我们可以通过 :ls 或者 :buffers 查看这些 Buffer，还可以通过 类似:buffer n 的方式重新打开文件（Buffer的序号）。

    Window：是对应 Buffer 的一个展示窗口。一个 Buffer 可以对应多个窗口，比如 我们可以通过:split filename 或者 :vsplit filename 命令在多个窗口打开一个文 件，当修改某一个窗口的文件时，其他窗口都会同步更新。当然我们也可以在多个窗口打开 多个文件，编辑后用 :wq 保存退出，但是记住，只要没有最终退出 Vim 进程，那么这些 打开的文件 Buffer 依然保存在缓存区中，可以随时再次打开。

    Tab-page：Tab-page 就比较容易理解，对应一组窗口，我们可以通过:tabedit filename 在另一个标签页中打开一个文件，在这个标签页中又可以打开多个窗口。

分屏
~~~~

折叠
~~~~

语法高亮
~~~~~~~~

差异比对
~~~~~~~~

| gvim -d file1 file2
| ]c [c

配置文件详解
------------

常用配置
~~~~~~~~

插件系统
--------

安装插件
~~~~~~~~

Pathogen
~~~~~~~~

Vim-plug
~~~~~~~~

其他技巧和常见问题
------------------

转换为 HTML
~~~~~~~~~~~

重新选择
~~~~~~~~

文件编码转换
~~~~~~~~~~~~

缩进控制
~~~~~~~~

寄存器和宏
~~~~~~~~~~

其他资源
--------

| vim.org
| Vimawesome
| Vimcast
| vimer.cn
